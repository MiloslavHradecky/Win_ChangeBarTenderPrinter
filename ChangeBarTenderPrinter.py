#!/usr/bin/env python3

import os
import logging
import win32com.client
import configparser

__version__ = '1.0.0.0'


class PrinterChanger:
    """
    T≈ô√≠da pro zmƒõnu tisk√°rny u Bartender soubor≈Ø.

    - Naƒç√≠t√° slo≈æku s etiketami z 'config.ini'
    - Proch√°z√≠ soubory '.btw' a nastavuje spr√°vn√© tisk√°rny
    - Ukl√°d√° zmƒõny zpƒõt do souboru
    """

    def __init__(self, config_file='config.ini'):
        """
        Inicializuje 'PrinterChanger' a naƒçte konfiguraci.

        :param config_file: Cesta ke konfiguraƒçn√≠mu souboru ('config.ini')
        """
        config = configparser.ConfigParser()
        config.optionxform = str
        config.read(config_file)

        self.folder_path = config.get('Paths', 'labels_folder')

        # üìå P≈ôevod 'PrinterMapping' z INI na slovn√≠k v Pythonu
        self.prefix_printer_map = {key: value for key, value in config.items('PrinterMapping')}

        self.logger = LoggerManager()

    def change_printer_for_files(self):
        """
        Proch√°z√≠ soubory '.btw' a nastavuje spr√°vnou tisk√°rnu.

        - Otev≈ôe Bartender aplikaci
        - Pro ka≈æd√Ω '.btw' soubor nastav√≠ tisk√°rnu podle prefixu
        - Ulo≈æ√≠ zmƒõny a zaloguje v√Ωsledek
        """
        bt_app = win32com.client.Dispatch('BarTender.Application')
        bt_app.Visible = False

        self.logger.start_logging_session()

        # üìå Projdeme v≈°echny soubory ve slo≈æce
        for filename in os.listdir(self.folder_path):
            if filename.endswith('.btw'):
                for prefix, printer_name in self.prefix_printer_map.items():
                    if filename.startswith(prefix):
                        file_path = os.path.join(self.folder_path, filename)
                        try:
                            bt_format = bt_app.Formats.Open(file_path, False, '')
                            if bt_format:
                                bt_format.Printer = printer_name
                                bt_format.Save()
                                bt_format.Close(1)  # ‚úÖ btDoNotSaveChanges
                                self.logger.log('Info', f'Tisk√°rna "{printer_name}" √∫spƒõ≈°nƒõ zmƒõnƒõna pro soubor: {filename}')
                            else:
                                self.logger.log('Error', f'Selhalo otev≈ôen√≠ souboru: {filename}')
                        except Exception as e:
                            self.logger.log('Error', f'Chyba p≈ôi zpracov√°n√≠ souboru {filename}: {e}')

        bt_app.Quit(1)  # ‚úÖ btDoNotSaveChanges


class LoggerManager:
    """
    T≈ô√≠da pro spr√°vu logov√°n√≠ aplikace.

    - Nastavuje 'logging' s ƒçasov√Ωm raz√≠tkem
    - P≈ôid√°v√° pr√°zdn√Ω ≈ô√°dek pouze p≈ôi spu≈°tƒõn√≠ skriptu
    - Umo≈æ≈àuje logov√°n√≠ r≈Øzn√Ωch √∫rovn√≠ ('Info', 'Warning', 'Error')
    """

    def __init__(self, config_file='config.ini'):
        """
        Inicializuje 'LoggerManager' a nastav√≠ konfiguraci logov√°n√≠.

        :param config_file: Cesta ke konfiguraƒçn√≠mu souboru ('config.ini')
        """
        config = configparser.ConfigParser()
        config.optionxform = str
        config.read(config_file)

        self.log_file_path = os.path.abspath(config.get('Paths', 'log_file_path'))

        # üìå Vytvo≈ôen√≠ adres√°≈ôe pro log soubor, pokud neexistuje
        log_dir = os.path.dirname(self.log_file_path)
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)

        logging.basicConfig(
            filename=self.log_file_path,
            level=logging.INFO,
            encoding='utf-8',
            format='%(asctime)s_%(levelname)-7s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )

        self.logger = logging.getLogger(__name__)

    def start_logging_session(self):
        """
        P≈ôid√° pr√°zdn√Ω ≈ô√°dek p≈ôi spu≈°tƒõn√≠ skriptu, aby oddƒõlil ka≈æd√© spu≈°tƒõn√≠ od p≈ôedchoz√≠ho.
        """
        with open(self.log_file_path, 'a', encoding='utf-8') as log_file:
            log_file.write('\n')

    def log(self, level, message):
        """ Zaloguje zpr√°vu podle zvolen√© √∫rovnƒõ. """
        if level == 'Info':
            self.logger.info(message)
        elif level == 'Warning':
            self.logger.warning(message)
        elif level == 'Error':
            self.logger.error(message)


# üìå Spu≈°tƒõn√≠ procesu
if __name__ == '__main__':
    printer_changer = PrinterChanger()
    printer_changer.change_printer_for_files()
